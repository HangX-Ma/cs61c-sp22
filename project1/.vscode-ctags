!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-leak-check	Makefile	/^	valgrind --leak-check=full --track-origins=yes .\/unit-tests -m$/;"	m
BOARD_COL	state.c	9;"	d	file:
BOARD_ROW	state.c	8;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wno-unused-function -std=c99 -g$/;"	m
COLOR_GREEN	Makefile	/^COLOR_GREEN =$/;"	m
COLOR_GREEN	unit_tests.c	/^char* COLOR_GREEN = "";$/;"	v
COLOR_RESET	Makefile	/^COLOR_RESET =$/;"	m
COLOR_RESET	unit_tests.c	/^char* COLOR_RESET = "";$/;"	v
INTERACTIVE_DEPS	Makefile	/^INTERACTIVE_DEPS = interactive_snake.o snake_utils.o state.o$/;"	m
KEY_MOVEDOWN	snake_utils.h	10;"	d
KEY_MOVELEFT	snake_utils.h	11;"	d
KEY_MOVERIGHT	snake_utils.h	9;"	d
KEY_MOVEUP	snake_utils.h	8;"	d
KEY_QUIT	snake_utils.h	12;"	d
LDFLAGS	Makefile	/^LDFLAGS =$/;"	m
OLOR_GREEN	Makefile	/^		override COLOR_GREEN := $(shell tput setaf 2)$/;"	m
OLOR_RESET	Makefile	/^		override COLOR_RESET := $(shell tput sgr0)$/;"	m
SNAKE_DEPS	Makefile	/^SNAKE_DEPS = snake.o snake_utils.o state.o$/;"	m
TESTS	Makefile	/^TESTS = 1-simple 2-direction 3-tail 4-food 5-wall 6-small 7-large 8-multisnake 9-everything$/;"	m
UNIT_TESTS_DEPS	Makefile	/^UNIT_TESTS_DEPS = snake_utils.o unit_tests.o$/;"	m
_POSIX_C_SOURCE	interactive_snake.c	1;"	d	file:
_SNK_SNAKE_UTILS_H	snake_utils.h	2;"	d
_SNK_STATE_H	state.h	2;"	d
assert_equals_char	unit_tests.c	/^bool assert_equals_char(char* msg, char expected, char actual) {$/;"	f
assert_equals_int	unit_tests.c	/^bool assert_equals_int(char* msg, int expected, int actual) {$/;"	f
assert_map_equals	unit_tests.c	/^bool assert_map_equals(game_state_t* state, int x, int y, char expected) {$/;"	f
assert_state_equals	unit_tests.c	/^bool assert_state_equals(game_state_t* expected, game_state_t* actual) {$/;"	f
assert_true	unit_tests.c	/^bool assert_true(char* msg, bool actual) {$/;"	f
board	state.h	/^  char **board;$/;"	m	struct:game_state_t
body_to_tail	state.c	/^static char body_to_tail(char c) {$/;"	f	file:
corner_food	snake_utils.c	/^int corner_food(game_state_t* state) {$/;"	f
create_default_state	state.c	/^game_state_t *create_default_state() {$/;"	f
det_rand	snake_utils.c	/^uint32_t det_rand(uint32_t* state) {$/;"	f
deterministic_food	snake_utils.c	/^int deterministic_food(game_state_t* state) {$/;"	f
find_head	state.c	/^static void find_head(game_state_t *state, int snum) {$/;"	f	file:
free_state	state.c	/^void free_state(game_state_t *state) {$/;"	f
game_interval	interactive_snake.c	/^struct timespec game_interval = {1, 0L};$/;"	v	typeref:struct:timespec
game_loop	interactive_snake.c	/^void* game_loop(void* _) {$/;"	f
game_state_t	state.h	/^typedef struct game_state_t {$/;"	s
game_state_t	state.h	/^} game_state_t;$/;"	t	typeref:struct:game_state_t
get_board_at	state.c	/^static char get_board_at(game_state_t *state, int x, int y) {$/;"	f	file:
get_raw_char	interactive_snake.c	/^int get_raw_char() {$/;"	f
head_x	state.h	/^  unsigned int head_x;$/;"	m	struct:snake_t
head_y	state.h	/^  unsigned int head_y;$/;"	m	struct:snake_t
incr_x	state.c	/^static int incr_x(char c) {$/;"	f	file:
incr_y	state.c	/^static int incr_y(char c) {$/;"	f	file:
init_colors	unit_tests.c	/^void init_colors() {$/;"	f
initialize_snakes	state.c	/^game_state_t *initialize_snakes(game_state_t *state) {$/;"	f
input_loop	interactive_snake.c	/^void input_loop() {$/;"	f
is_snake	state.c	/^static bool is_snake(char c) {$/;"	f	file:
is_tail	state.c	/^static bool is_tail(char c) {$/;"	f	file:
live	state.h	/^  bool live;$/;"	m	struct:snake_t
load_board	state.c	/^game_state_t *load_board(char *filename) {$/;"	f
main	interactive_snake.c	/^int main(int argc, char* argv[]) {$/;"	f
main	snake.c	/^int main(int argc, char* argv[]) {$/;"	f
main	unit_tests.c	/^int main(int argc, char* argv[]) {$/;"	f
next_square	state.c	/^static char next_square(game_state_t *state, int snum) {$/;"	f	file:
num_snakes	state.h	/^  unsigned int num_snakes;$/;"	m	struct:game_state_t
print_board	state.c	/^void print_board(game_state_t *state, FILE *fp) {$/;"	f
print_fullscreen_board	interactive_snake.c	/^void print_fullscreen_board(game_state_t* state) {$/;"	f
random_turn	snake_utils.c	/^void random_turn(game_state_t* state, int snum) {$/;"	f
redirect_snake	snake_utils.c	/^void redirect_snake(game_state_t* state, char newhead) {$/;"	f
save_board	state.c	/^void save_board(game_state_t *state, char *filename) {$/;"	f
seed	snake_utils.c	/^uint32_t seed = 1;$/;"	v
set_board_at	state.c	/^static void set_board_at(game_state_t *state, int x, int y, char ch) {$/;"	f	file:
snake_seed	snake_utils.c	/^uint32_t snake_seed = 1;$/;"	v
snake_t	state.h	/^typedef struct snake_t {$/;"	s
snake_t	state.h	/^} snake_t;$/;"	t	typeref:struct:snake_t
snakes	state.h	/^  snake_t* snakes;$/;"	m	struct:game_state_t
state	interactive_snake.c	/^game_state_t* state = NULL;$/;"	v
state_mutex	interactive_snake.c	/^pthread_mutex_t state_mutex;$/;"	v
tail_x	state.h	/^  unsigned int tail_x;$/;"	m	struct:snake_t
tail_y	state.h	/^  unsigned int tail_y;$/;"	m	struct:snake_t
test_and_print	unit_tests.c	/^bool test_and_print(char* label, bool (*run_test)()) {$/;"	f
test_body_to_tail	unit_tests.c	/^bool test_body_to_tail() {$/;"	f
test_create_default_state	unit_tests.c	/^bool test_create_default_state() {$/;"	f
test_find_head	unit_tests.c	/^bool test_find_head() {$/;"	f
test_find_head_board_1	unit_tests.c	/^bool test_find_head_board_1() {$/;"	f
test_free_state	unit_tests.c	/^bool test_free_state() {$/;"	f
test_helpers	unit_tests.c	/^bool test_helpers() {$/;"	f
test_incr_x	unit_tests.c	/^bool test_incr_x() {$/;"	f
test_incr_y	unit_tests.c	/^bool test_incr_y() {$/;"	f
test_initialize_snakes	unit_tests.c	/^bool test_initialize_snakes() {$/;"	f
test_initialize_snakes_board_1	unit_tests.c	/^bool test_initialize_snakes_board_1() {$/;"	f
test_initialize_snakes_board_2	unit_tests.c	/^bool test_initialize_snakes_board_2() {$/;"	f
test_is_snake	unit_tests.c	/^bool test_is_snake() {$/;"	f
test_is_tail	unit_tests.c	/^bool test_is_tail() {$/;"	f
test_load_board	unit_tests.c	/^bool test_load_board() {$/;"	f
test_load_board_1	unit_tests.c	/^bool test_load_board_1() {$/;"	f
test_load_board_2	unit_tests.c	/^bool test_load_board_2() {$/;"	f
test_next_square	unit_tests.c	/^bool test_next_square() {$/;"	f
test_next_square_board_1	unit_tests.c	/^bool test_next_square_board_1() {$/;"	f
test_next_square_board_2	unit_tests.c	/^bool test_next_square_board_2() {$/;"	f
test_next_square_board_3	unit_tests.c	/^bool test_next_square_board_3() {$/;"	f
test_next_square_board_4	unit_tests.c	/^bool test_next_square_board_4() {$/;"	f
test_next_square_board_5	unit_tests.c	/^bool test_next_square_board_5() {$/;"	f
test_next_square_board_6	unit_tests.c	/^bool test_next_square_board_6() {$/;"	f
test_print_board	unit_tests.c	/^bool test_print_board() {$/;"	f
test_update_head	unit_tests.c	/^bool test_update_head() {$/;"	f
test_update_head_board_1	unit_tests.c	/^bool test_update_head_board_1() {$/;"	f
test_update_head_board_2	unit_tests.c	/^bool test_update_head_board_2() {$/;"	f
test_update_head_board_3	unit_tests.c	/^bool test_update_head_board_3() {$/;"	f
test_update_state	unit_tests.c	/^bool test_update_state() {$/;"	f
test_update_state_board_1	unit_tests.c	/^bool test_update_state_board_1() {$/;"	f
test_update_state_board_2	unit_tests.c	/^bool test_update_state_board_2() {$/;"	f
test_update_state_board_3	unit_tests.c	/^bool test_update_state_board_3() {$/;"	f
test_update_state_board_4	unit_tests.c	/^bool test_update_state_board_4() {$/;"	f
test_update_tail	unit_tests.c	/^bool test_update_tail() {$/;"	f
test_update_tail_board_1	unit_tests.c	/^bool test_update_tail_board_1() {$/;"	f
test_update_tail_board_2	unit_tests.c	/^bool test_update_tail_board_2() {$/;"	f
test_update_tail_board_3	unit_tests.c	/^bool test_update_tail_board_3() {$/;"	f
update_head	state.c	/^static void update_head(game_state_t *state, int snum) {$/;"	f	file:
update_state	state.c	/^void update_state(game_state_t *state, int (*add_food)(game_state_t *state)) {$/;"	f
update_tail	state.c	/^static void update_tail(game_state_t *state, int snum) {$/;"	f	file:
x_size	state.h	/^  unsigned int x_size;$/;"	m	struct:game_state_t
y_size	state.h	/^  unsigned int y_size;$/;"	m	struct:game_state_t
